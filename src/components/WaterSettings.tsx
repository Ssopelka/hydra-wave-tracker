import { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Target, Bell, Trash2, Download, Upload } from "lucide-react";
import { toast } from "sonner";

interface DayData {
  date: string;
  total: number;
  entries: any[];
}

interface WaterSettingsProps {
  dailyGoal: number;
  setDailyGoal: (goal: number) => void;
  history: DayData[];
  setHistory: (history: DayData[]) => void;
}

export const WaterSettings = ({ dailyGoal, setDailyGoal, history, setHistory }: WaterSettingsProps) => {
  const [tempGoal, setTempGoal] = useState(dailyGoal.toString());
  const [useMetric, setUseMetric] = useState(true);
  const [reminders, setReminders] = useState(false);

  const saveGoal = () => {
    const newGoal = parseInt(tempGoal);
    if (newGoal > 0 && newGoal <= 10000) {
      setDailyGoal(newGoal);
      localStorage.setItem("waterGoal", newGoal.toString());
      toast.success("–¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!");
    } else {
      toast.error("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (1-10000 –º–ª)");
    }
  };

  const exportData = () => {
    const dataStr = JSON.stringify({ history, dailyGoal }, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `aquatrack-backup-${new Date().toISOString().split('T')[0]}.json`;
    link.click();
    toast.success("–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!");
  };

  const importData = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const data = JSON.parse(e.target?.result as string);
          if (data.history && data.dailyGoal) {
            setHistory(data.history);
            setDailyGoal(data.dailyGoal);
            setTempGoal(data.dailyGoal.toString());
            localStorage.setItem("waterGoal", data.dailyGoal.toString());
            localStorage.setItem("waterHistory", JSON.stringify(data.history));
            toast.success("–î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!");
          } else {
            toast.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞");
          }
        } catch (error) {
          toast.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞");
        }
      };
      reader.readAsText(file);
    }
  };

  return (
    <div className="space-y-6">
      {/* Daily Goal */}
      <Card className="p-6 glass-effect">
        <div className="flex items-center gap-3 mb-4">
          <div className="w-10 h-10 rounded-full water-gradient flex items-center justify-center">
            <Target className="w-5 h-5 text-white" />
          </div>
          <h3 className="text-lg font-semibold">–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å</h3>
        </div>
        
        <div className="space-y-4">
          <div>
            <Label htmlFor="goal">–¶–µ–ª—å (–º–ª)</Label>
            <div className="flex gap-2 mt-2">
              <Input
                id="goal"
                type="number"
                value={tempGoal}
                onChange={(e) => setTempGoal(e.target.value)}
                className="flex-1"
                min="500"
                max="10000"
                step="100"
              />
              <Button onClick={saveGoal} className="water-gradient">
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </Button>
            </div>
            <p className="text-xs text-muted-foreground mt-2">
              –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 2000-3000 –º–ª –≤ –¥–µ–Ω—å
            </p>
          </div>

          <div className="grid grid-cols-3 gap-2">
            {[1500, 2000, 2500, 3000].map((preset) => (
              <Button
                key={preset}
                variant="outline"
                size="sm"
                onClick={() => setTempGoal(preset.toString())}
                className="hover:water-gradient hover:text-white"
              >
                {preset} –º–ª
              </Button>
            ))}
          </div>
        </div>
      </Card>

      {/* Units */}
      <Card className="p-6 glass-effect">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="font-semibold mb-1">–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è</h3>
            <p className="text-sm text-muted-foreground">
              {useMetric ? "–ú–∏–ª–ª–∏–ª–∏—Ç—Ä—ã (–º–ª)" : "–£–Ω—Ü–∏–∏ (oz)"}
            </p>
          </div>
          <Switch
            checked={useMetric}
            onCheckedChange={setUseMetric}
          />
        </div>
      </Card>

      {/* Reminders */}
      <Card className="p-6 glass-effect">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 rounded-full water-gradient flex items-center justify-center">
              <Bell className="w-5 h-5 text-white" />
            </div>
            <div>
              <h3 className="font-semibold">–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</h3>
              <p className="text-sm text-muted-foreground">
                –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∏—Ç—å–µ –≤–æ–¥—ã
              </p>
            </div>
          </div>
          <Switch
            checked={reminders}
            onCheckedChange={setReminders}
          />
        </div>
        
        {reminders && (
          <div className="pt-4 border-t border-border/50">
            <p className="text-sm text-muted-foreground">
              üí° –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã—Ö push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
            </p>
          </div>
        )}
      </Card>

      {/* Data Management */}
      <Card className="p-6 glass-effect">
        <h3 className="font-semibold mb-4">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏</h3>
        <div className="space-y-3">
          <Button
            onClick={exportData}
            variant="outline"
            className="w-full justify-start"
          >
            <Download className="w-4 h-4 mr-2" />
            –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
          </Button>

          <div>
            <input
              type="file"
              id="import-file"
              accept=".json"
              onChange={importData}
              className="hidden"
            />
            <Button
              onClick={() => document.getElementById('import-file')?.click()}
              variant="outline"
              className="w-full justify-start"
            >
              <Upload className="w-4 h-4 mr-2" />
              –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
            </Button>
          </div>

          <Button
            onClick={() => {
              if (window.confirm("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!")) {
                setHistory([]);
                localStorage.removeItem("waterHistory");
                toast.success("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã");
              }
            }}
            variant="outline"
            className="w-full justify-start text-destructive hover:bg-destructive/10"
          >
            <Trash2 className="w-4 h-4 mr-2" />
            –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
          </Button>
        </div>
      </Card>

      {/* Info */}
      <Card className="p-6 glass-effect bg-primary/5">
        <h3 className="font-semibold mb-2">üíß –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</h3>
        <p className="text-sm text-muted-foreground leading-relaxed">
          AquaTrack –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã. 
          –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –≤–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –∏ —Ö–æ—Ä–æ—à–µ–≥–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è!
        </p>
      </Card>
    </div>
  );
};
